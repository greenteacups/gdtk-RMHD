# Author: Nick Gibbons
# Date: 2024-04-08
#
# Integration test for the 15 degree reacting ramp.

import pytest
import subprocess
import re
import os
from numpy import sqrt

# Solution generated by $ lmr extract-line -l "0.4,0.508,0.0,0.75,0.321,0.0,10"
REF_SOLUTION = """pos.x pos.y vol rho vel.x vel.y p a shock-detector massf-H2 massf-O2 massf-H2O massf-OH massf-O massf-H massf-N2 dt_subcycle e T
 0.412484 0.49967 0.000555919 0.469879 1841.4 0.00225753 101001 541.588 0 0.005 0.24 1.25611e-11 1.21108e-13 1.94552e-12 5.80218e-13 0.755 -1 229652 700.001
 0.437484 0.481369 0.000551733 0.469908 1841.38 0.0433674 101011 541.598 0 0.005 0.24 1.35913e-11 1.30446e-13 2.10873e-12 6.27576e-13 0.755 -1 229674 700.028
 0.487484 0.467505 0.000543359 0.472008 1840.18 3.02696 101740 542.297 0 0.005 0.24 1.59519e-11 1.54935e-13 2.48473e-12 7.35959e-13 0.755 -1 231286 701.941
 0.512484 0.450041 0.000539173 0.502852 1822.41 46.1585 112604 552.155 0 0.005 0.24 1.85563e-11 2.44345e-13 2.93902e-12 8.53057e-13 0.755 -1 254387 729.244
 0.562484 0.416118 0.000530799 0.823924 1554.72 383.562 334895 729.9 0 0.000160647 0.19578 0.0396175 0.00253686 0.00664888 0.000255869 0.755 -1 451367 1351.67
 0.587483 0.399659 0.000526612 0.874211 1502.84 417.519 389318 761.717 0 8.54935e-05 0.196619 0.0417365 0.0026462 0.00382503 8.74365e-05 0.755 -1 478210 1490.44
 0.637483 0.388475 0.000518239 0.876368 1493.78 419.129 402537 772.736 0 4.8777e-05 0.197769 0.0427627 0.00221892 0.00216646 3.46435e-05 0.755 -1 477120 1541.83
 0.662483 0.352291 0.000514052 0.861741 1499.03 411.547 398984 775.544 0 3.21152e-05 0.198423 0.0432534 0.00185361 0.00141972 1.80478e-05 0.755 -1 468746 1556.12
 0.712483 0.342614 0.000505679 0.854079 1502.12 407.708 396680 776.645 0 2.44905e-05 0.198755 0.0434908 0.00163791 0.00108016 1.18935e-05 0.755 -1 464232 1561.9
 0.737483 0.327997 0.000501492 0.85154 1504.35 406.299 395786 776.884 0 2.10742e-05 0.198914 0.0436031 0.00152458 0.000928267 9.46125e-06 0.755 -1 461113 1563.42"""

def process_extracted_line(solution):
    lines = [line.strip().split() for line in solution.splitlines()]
    header = lines[0]
    body = list(zip(*[list(map(float,line)) for line in lines[1:]]))
    assert(len(body)==len(header))
    return dict(zip(header, body))

def rms_difference(sol, ref, key):
    diff = [s-r for s,r in zip(sol[key], ref[key])]
    rms = sqrt(sum(i*i for i in diff)/len(diff))
    return rms
    
# This is used to change to local directory so that subprocess runs nicely.
@pytest.fixture(autouse=True)
def change_test_dir(request, monkeypatch):
    monkeypatch.chdir(request.fspath.dirname)

def test_gen_grid():
    cmd = "lmr custom-script --job=gengrid.lua"
    proc = subprocess.run(cmd.split(), capture_output=True, text=True)
    assert proc.returncode == 0, "Failed during: " + cmd

def test_partition_grid():
    cmds = ["ugrid_partition grid.su2 mapped-cells 4 2",
            "mkdir -p su2grid",
            "mv block_0_grid.su2 block_1_grid.su2 block_2_grid.su2 block_3_grid.su2 su2grid/",
    ]

    for cmd in cmds:
        proc = subprocess.run(cmd.split(), capture_output=True, text=True)
        assert proc.returncode == 0, "Failed during: " + cmd

def test_prep():
    cmds = ["mkdir -p lmrsim",
            "cp mapped-cells lmrsim/mapped-cells",
            "lmr prep-gas -i species.inp -o lmrsim/species.lua",
            "lmr prep-chem -g lmrsim/species.lua -i reactions.inp -o lmrsim/reactions.lua",
            "lmr prep-grid -j importgrid.lua",
            "lmr prep-sim",
    ]


    for cmd in cmds:
        proc = subprocess.run(cmd.split(), capture_output=True, text=True)
        assert proc.returncode == 0, "Failed during: " + cmd

def test_run_steady():
    cmd = "mpirun -np 4 lmrZ-mpi-run"
    proc = subprocess.run(cmd.split(), capture_output=True, text=True)
    assert proc.returncode == 0, "Failed during: " + cmd
    reason = ""
    steps = 0
    t = 0.0
    lines = proc.stdout.split("\n")
    for line in lines:
        if line.find("STOP-REASON") != -1:
            reason = ' '.join(line.split()[1:]).strip()
        if line.find("FINAL-STEP") != -1:
            steps = int(line.split()[1])
    assert reason.startswith("relative-global-residual-target"), \
      "Failed to stop for the expected reason:" + reason
    assert abs(steps-357) < 5, "Failed to take correct number of steps:" + str(steps)

def test_solution():
    cmd = 'lmr extract-line -l "0.4,0.508,0.0,0.75,0.321,0.0,10"'
    proc = subprocess.run(cmd.split(), capture_output=True, text=True)
    assert proc.returncode == 0, "Failed during: " + cmd

    sol = process_extracted_line(proc.stdout)
    ref = process_extracted_line(REF_SOLUTION)

    Tdiff = rms_difference(sol, ref, 'T')
    H2diff = rms_difference(sol, ref, 'massf-H2')
    H2Odiff = rms_difference(sol, ref, 'massf-H2O')
    veldiff = rms_difference(sol, ref, 'vel.x')

    #print("Tdiff",   Tdiff)
    #print("H2diff",  H2diff )
    #print("H2Odiff", H2Odiff)
    #print("veldiff", veldiff)

    assert Tdiff < 1e-9, "Computed incorrect temperature field."
    assert H2diff < 1e-9, "Computed incorrect Hydrogen field."
    assert H2Odiff < 1e-9, "Computed incorrect Water field."
    assert veldiff < 1e-9, "Computed incorrect velocity field."

def test_cleanup():
    cmd = "rm -rf ./lmrsim mapped-cells su2grid grid.su2 "
    proc = subprocess.run(cmd.split())
    assert proc.returncode == 0, "Failed during: " + cmd
